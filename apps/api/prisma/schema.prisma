generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  password            String?
  email               String            @unique
  name                String?
  birthDate           DateTime?
  gender              String?
  education           String?
  address             String?
  profilePictureUrl   String?
  isVerified          Boolean           @default(false)
  isBlocked           Boolean           @default(false)
  subscriptionType    SubscriptionType?
  subscriptionEndDate DateTime?
  subscriptions       Subscription[]
  applications        Application[]
  applicant           Applicant[]
  notifications       Notifications[]
  paymentHistories    PaymentHistory[]
  analytics           Analytics[]
  auth                Auth?
}

model Admin {
  id                 Int            @id @default(autoincrement())
  password           String
  email              String         @unique
  companyName        String
  phoneNumber        String
  companyDescription String?
  companyLogoUrl     String?
  isBlocked          Boolean        @default(false)
  status             AdminStatus
  jobs               Job[]
  notifications      Notifications[]
  test               Test[]
  auth               Auth?
}

model Developer {
  id               Int               @id @default(autoincrement())
  password         String
  email            String            @unique
  role             DeveloperRole
  lastLogin        DateTime?
  skillAssessments SkillAssessment[]
  notifications    Notifications[]
  auth             Auth?
}

model Auth {
  id            Int       @id @default(autoincrement())
  userId        Int?      @unique
  adminId       Int?      @unique
  developerId   Int?      @unique
  email         String    @unique
  password      String
  lastLogin     DateTime?
  loginAttempts Int       @default(0)

  user      User?      @relation(fields: [userId], references: [id])
  admin     Admin?     @relation(fields: [adminId], references: [id])
  developer Developer? @relation(fields: [developerId], references: [id])
}

model Subscription {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      SubscriptionType
  startDate DateTime
  endDate   DateTime

  user User @relation(fields: [userId], references: [id])
}

model Job {
  id              Int       @id @default(autoincrement())
  admin_id        Int   
  title           String
  description     String
  banner          String? 
  category        String  
  location        String
  salary          Decimal? @db.Decimal(10, 2)
  tags            String?
  expiry_date     DateTime
  published       Boolean  @default(false)
  requires_test   Boolean  @default(true) 
  remote_option   Boolean  @default(false) 
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  applicant       Applicant[]
  test            Test[]
  application     Application[]
  admin        Admin         @relation(fields: [admin_id], references: [id])
}

model Application {
  id             Int               @id @default(autoincrement())
  jobId          Int
  userId         Int
  status         ApplicationStatus? @default(PENDING)
  resumeUrl      String
  appliedAt      DateTime          @default(now())
  coverLetter    String?
  expectedSalary Float?

  job  Job  @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model SkillAssessment {
  id              Int             @id @default(autoincrement())
  developerId     Int
  title           String
  description     String
  questionCount   Int
  difficultyLevel DifficultyLevel
  isActive        Boolean         @default(true)

  developer Developer @relation(fields: [developerId], references: [id])
}

model InterviewSchedule {
  id             Int       @id @default(autoincrement())
  applicant_id  Int
  date_time      DateTime
  location       String
  status         InterviewStatus

  applicant    Applicant @relation(fields: [applicant_id], references: [id])
}

model Notifications {
  id          Int                @id @default(autoincrement())
  userId      Int?
  adminId     Int?
  developerId Int?
  message     String
  type        NotificationType
  createdAt   DateTime           @default(now())
  status      NotificationStatus

  user      User?      @relation(fields: [userId], references: [id])
  admin     Admin?     @relation(fields: [adminId], references: [id])
  developer Developer? @relation(fields: [developerId], references: [id])
}

model PaymentHistory {
  id            Int           @id @default(autoincrement())
  userId        Int
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())
  transactionId String
  status        PaymentStatus

  user User @relation(fields: [userId], references: [id])
}

model Test {
  id          Int       @id @default(autoincrement())
  job_id      Int
  created_by   Int  
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  title       String    
  questions   Question[]
  results     Result[]
  job         Job      @relation(fields: [job_id], references: [id])
  admin       Admin    @relation(fields: [created_by], references: [id])

  @@map("tests")
}

model Question {
  id           Int       @id @default(autoincrement())
  test_id      Int
  question_text String @db.VarChar(500)
  choices      Choice[]
  test         Test     @relation(fields: [test_id], references: [id])

   @@map("questions")
}

model Choice {
  id           Int       @id @default(autoincrement())
  question_id   Int 
  choice_text   String  
  is_correct    Boolean  
  question     Question @relation(fields: [question_id], references: [id])

   @@map("choices") 
}

model Result {
  id          Int       @id @default(autoincrement())
  test_id     Int
  applicant_id Int 
  score       Int
  passed      Boolean    @default(false)
  completed_at DateTime
  test        Test       @relation(fields: [test_id], references: [id])
  applicant    Applicant @relation(fields: [applicant_id], references: [id])
}

model Applicant {
  id               Int       @id @default(autoincrement())
  job_posting_id   Int 
  user_id          Int 
  applied_at        DateTime @default(now())
  cv_url            String? 
  expected_salary   Decimal? @db.Decimal(10, 2)
  status            ApplicationStatus @default(PENDING)
  interview_schedule InterviewSchedule[]
  job              Job      @relation(fields: [job_posting_id], references: [id])
  user             User     @relation(fields: [user_id], references: [id])

  result Result[]
}

model Analytics {
  id              Int       @id @default(autoincrement())
  user_id         Int 
  age             Int
  gender          String?
  location        String?
  salary          Decimal? 
  interests       Json?     // Store multiple interests as a JSON array
  recorded_at     DateTime  @default(now())  // timestamp for when the data was recorded
  
  user            User      @relation(fields: [user_id], references: [id]) 
}

enum SubscriptionType {
  STANDARD
  PROFESSIONAL
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum DeveloperRole {
  ADMIN
  SUPPORT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  UNDER_REVIEW
  IN_PROCESS
  INTERVIEW
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum NotificationType {
  EMAIL
  ALERT
  REMINDER
}

enum NotificationStatus {
  SENT
  PENDING
}

enum PaymentMethod {
  MANUAL
  GATEWAY
}

enum PaymentStatus {
  APPROVED
  PENDING
  FAILED
}
