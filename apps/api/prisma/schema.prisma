// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  password            String?
  email               String            @unique
  name                String?
  birthDate           DateTime?
  gender              String?
  education           String?
  address             String?
  profilePicture      String?
  isVerified          Boolean           @default(false)
  isBlocked           Boolean           @default(false)
  subscriptionType    SubscriptionType?
  subscriptionEndDate DateTime?
  subscriptions       Subscription[]
  applications        Application[]
  notifications       Notification[]
  paymentHistories    PaymentHistory[]
  auth                Auth?
}

model Admin {
  id                 Int            @id @default(autoincrement())
  password           String
  email              String         @unique
  companyName        String
  phoneNumber        String
  companyDescription String?
  companyLogo        String?
  isBlocked          Boolean        @default(false)
  status             AdminStatus
  jobs               Job[]
  notifications      Notification[]
  auth               Auth?
}

model Developer {
  id               Int               @id @default(autoincrement())
  password         String
  email            String            @unique
  lastLogin        DateTime?
  skillAssessments SkillAssessment[]
  notifications    Notification[]
  auth             Auth?
}

model Auth {
  id            Int       @id @default(autoincrement())
  userId        Int?      @unique
  adminId       Int?      @unique
  developerId   Int?      @unique
  email         String    @unique
  password      String
  lastLogin     DateTime?
  loginAttempts Int       @default(0)

  user      User?      @relation(fields: [userId], references: [id])
  admin     Admin?     @relation(fields: [adminId], references: [id])
  developer Developer? @relation(fields: [developerId], references: [id])
}

model Subscription {
  id        Int              @id @default(autoincrement())
  userId    Int
  type      SubscriptionType
  startDate DateTime
  endDate   DateTime

  user User @relation(fields: [userId], references: [id])
}

model Job {
  id           Int      @id @default(autoincrement())
  adminId      Int
  title        String
  description  String
  location     String
  salary       Float?
  createdAt    DateTime @default(now())
  expiryDate   DateTime
  tags         String?
  remoteOption Boolean

  admin        Admin         @relation(fields: [adminId], references: [id])
  applications Application[]
}

model Application {
  id             Int                @id @default(autoincrement())
  jobId          Int
  userId         Int
  status         ApplicationStatus? @default(PENDING)
  resume         String
  appliedAt      DateTime           @default(now())
  coverLetter    String?
  expectedSalary Float?

  interviewSchedule InterviewSchedule?

  job  Job  @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model SkillAssessment {
  id              Int             @id @default(autoincrement())
  developerId     Int
  title           String
  description     String
  questionCount   Int
  difficultyLevel DifficultyLevel
  isActive        Boolean         @default(true)

  developer Developer @relation(fields: [developerId], references: [id])
}

model InterviewSchedule {
  id            Int             @id @default(autoincrement())
  applicationId Int             @unique
  dateTime      DateTime
  location      String
  status        InterviewStatus

  application Application @relation(fields: [applicationId], references: [id])
}

model Notification {
  id          Int                @id @default(autoincrement())
  userId      Int?
  adminId     Int?
  developerId Int?
  message     String
  type        NotificationType
  createdAt   DateTime           @default(now())
  status      NotificationStatus

  user      User?      @relation(fields: [userId], references: [id])
  admin     Admin?     @relation(fields: [adminId], references: [id])
  developer Developer? @relation(fields: [developerId], references: [id])
}

model PaymentHistory {
  id            Int           @id @default(autoincrement())
  userId        Int
  amount        Float
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())
  transactionId String
  status        PaymentStatus

  user User @relation(fields: [userId], references: [id])
}

enum SubscriptionType {
  STANDARD
  PROFESSIONAL
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  UNDER_REVIEW
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum NotificationType {
  EMAIL
  ALERT
  REMINDER
}

enum NotificationStatus {
  SENT
  PENDING
}

enum PaymentMethod {
  MANUAL
  GATEWAY
}

enum PaymentStatus {
  APPROVED
  PENDING
  FAILED
}
